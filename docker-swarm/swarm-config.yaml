
#Apply via: ansible-playbook -i ./inventory.yaml --become docker-install.yaml

#---------------------------------------------------------------

- name: Configure Docker Swarm
  hosts: swarm_init
  tasks:
    #- name: "Check if Swarm is initialized"
    #  shell: "docker info | grep {{docker_variant}}"
    #  register: docker_chk
  
    #- name: "print docker chk"
    #  debug:
    #    msg: "Thats it {{docker_chk.stdout}}"  
    #  when: 1 == 1

    - name: "Check if Swarm needs to be initialized"
      shell: docker info | grep "Swarm"
      register: result
    
    - name: "Swarm initialization on {{hosts.childrean.swarm_init}}"
      shell: "docker swarm init"
      when: "'inactive' in result.stdout"

#-----------------------------------------

    - name: "Get Join tokens"
      block:
        - shell: "docker swarm join-token manager -q"
          register: join_token_manager
        - shell: "docker swarm join-token worker -q"
          register: join_token_worker
        - shell: "docker node ls"
          register: node_list
        #- debug:
        #    msg: "Manager: {{join_token_manager.stdout}}  - Worker: {{join_token_worker.stdout}}"

#---------------------------------------------------------------
    
- name: "Join Workers if needed"
  hosts: workers
  tasks:
    - shell: "docker swarm join --token {{hostvars[swarm_init]['join_token_worker']['stdout']}} {{swarm_init}}.{{dev_domain}}:{{swarm_port}}"
      when: inventory_hostname not in hostvars[swarm_init]['node_list']['stdout'] 

- name: "Join Managers if needed"
  hosts: managers
  tasks:
    - shell: "docker swarm join --token {{hostvars[swarm_init]['join_token_manager']['stdout']}} {{swarm_init}}.{{dev_domain}}:{{swarm_port}}"
      when: inventory_hostname not in hostvars[swarm_init]['node_list']['stdout'] 

#---------------------------------------------------------------

- name: Create Test Service (nginx on expose port 8080)
  hosts: swarm_init
  vars_prompt:
    - name: test_service
      prompt: "Create a test service? (yes/no)"
      private: no
  tasks:
    - name: "Test-Service"
      shell: "docker service create --name my_web --replicas 3 --publish 8080:80 nginx"
      when: test_service == 'yes'

#---------------------------------------------------------------